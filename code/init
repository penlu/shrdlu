;;;   THIS IS A PACKAGE FOR LOADING SHRDLU'S INTO CORE FROM THE DISK FILES.
;;;    THE PROCEDURE IS TO FIRST LOAD A BLISP (IGNORE ALLOCATIONS, THE 
;;;    PROGRAMS DO THEIR OWN). AND UREAD THIS FILE. EXECUTING "LOADSHRDLU"
;;;    WILL GENERATE (AFTER SOME TIME) A FULLY INTERPRETED VERSION. 
;;;    PARTIALLY COMPILED MIXES ARE AVAILLABLE, AS SEEN BELOW.
;;;    THE VARIABLE "VERSION-FILES" KEEPS A RUNNING TAB OF THE FILES
;;;    LOADER VIA "LOADER". IF ANY ERRORS OCCUR DURING READIN THEY
;;;    ARE PROTECTED BY AN "ERRSET" AND LOADING CONTINUES. (NOTE !! IF AN
;;;    UNBOUND PAREN CAUSES THE FILE TO BE TERMINATED TOO SOON, YOU'LL
;;;    NEVER NOTICE)
;;;

(defun comment nil
    'comment)

; no idea what the following line is about-- not sure what symbol is supposed to be
; MACLISP docs give comment as a function that returns 'comment
;(comment symbol 5000)   ;this file can now be used as a lisp init file via. the jcl line

(SETQ *RSET T) 

; According to MACLISP man, ERRSET has following behavior:
; errset evaluates its first argument. If no errors occur, the result
; is cons'ed with nil and returned. If an error occurs during the
; evaluation of the first argument, the error is prevented from escaping
; from inside the errset and errset returns nil. errset may also be
; made to return any arbitrary value by use of the err function.
; If a second argument is given to errset, it is not evaluated. If it
; is nil, no error message will be printed if an error occurs during the
; evaluation of errset's first argument. If the second argument is not
; nil, or if errset is used with only one argument, any error messages
; generated will be printed. 
; So here is an implementation:
(defmacro errset (error-prone &optional allow-message)
    `(handler-case ,error-prone
        (condition (message) (if ,allow-message (princ message) ()))))
;(princ 'one)
;(errset (/ 1 0) nil)
;(princ 'two)
;(errset (/ 1 0) 'asdf)
;(princ 'done)

; This only becomes a problem later, but we also lack FEXPRs in Common Lisp.
; So here's a defun-fexpr macro which should be used to replace every DEFUN
; that was supposed to produce a FEXPR. If I did this right, then the args
; shouldn't be evaluated unless the function evaluates them...
(defmacro defun-fexpr (name args &rest body)
   `(defmacro ,name ,args 
        ,@body))

; DEFPROP has become a different animal in common lisp, which thankfully still 
; supports property lists... now the form for
;    (DEFPROP x y z)
; is
;    (setf (get x z) y)
; where the property z of x is being set to y. None of x, y, or z is evaluated,
; so... a macro:
(defmacro DEFPROP (x y z)
    `(setf (get ',x ',z) ',y))

; and PUTPROP, which does evaluate its inputs
(defun PUTPROP (x y z)
    (setf (get x z) y))

; ASCII evidently takes a number and produces the relevant character
; implementation
(defun ascii (n)
    (code-char n))

(DEFUN LOADER (*!?KEY) 
;       (OR (ERRSET (EVAL (LIST 'UREAD      ; archaic loading function, incredibly confusing
;			       *!?KEY                   ; especially for lack of documentation... 1974 man says it's out of date
;			       '>
;			       'DSK
;			       'SHRDLU))
;		   NIL)
;	   (AND (PRINT *!?KEY)
;		(PRINC 'NOT-FOUND)
;		NIL))
;       (LOADX *!?KEY)) 
    (load *!?KEY))

(DEFUN LOADX (*!?KEY)
       (PROG (*!?H *!?F *!?EOF) 
	     (SETQ *!?EOF (GENSYM))
	     (PRINT 'READING)
	     (PRINC *!?KEY)
	     (SETQ VERSION-FILES (CONS (STATUS UREAD) VERSION-FILES))
	LOOP ((LAMBDA (^Q) (SETQ *!?H (READ *!?EOF))) T)
	     (AND (EQ *!?H *!?EOF) (RETURN T))
	     (OR (ERRSET ((LAMBDA (^W ^Q) (EVAL *!?H)) T T))
		 (PROG2 (PRINT 'ERROR-IN-FILE) (PRINT *!?H)))
	     (GO LOOP)))


(SETQ VERSION-FILES NIL) 

(DEFUN LOADSHRDLU NIL 
;       (ALLOC '(LIST 60000
;		     FIXNUM
;		     15000
;		     SYMBOL
;		      15000
;                     array 500 )) ; memory allocation functions probably no longer necessary here
       (SETQ PURE NIL)
;       (MAPC 'LOADER '(PLNR THTRAC))
;       (THINIT)
;       (SETQ THINF NIL THTREE NIL THLEVEL NIL)
;       (setq errlist nil)   ;removes micro-planner's fangs
       (MAPC 'LOADER '(SYSCOM MORPHO SHOW))
       (MAPC 'LOADER '(PROGMR GINTER GRAMAR DICTIO))
       (MAPC 'LOADER '(SMSPEC SMASS SMUTIL))
;       (LOADER 'NEWANS)
;       (MAPC 'LOADER '(BLOCKS DATA))
       (FASLOAD TRACE FASL COM COM)
;       (FASLOAD GRAPHF FASL DSK SHRDL1)
       (LOADER 'SETUP)
;       (fasload grindef fasl com com)
       'CONSTRUCTION/ COMPLETED) 


;this now loads all of SHRDLU except the blocks world code, microplanner, and the 
;answering capability.    - the shift to bibop lisp seems to have crippled microplanner
;in a non-obvious way, and the answering code is useless without the blocks world.
(loadshrdlu)
